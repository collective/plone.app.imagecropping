{"version":3,"file":"chunks/235.0cd0bb1b8e12da3735a9.min.js","mappings":"6SAGA,I,EAkMQ,EAlMOA,EAAAA,EAAAA,OAAY,CACvBC,KAAM,gBACNC,QAAS,qBACTC,OAAQ,SACRC,aAAa,EACbC,YAAY,EACZC,cAAc,EACdC,UAAU,EACVC,SAAU,CACNC,WAAY,KACZC,UAAW,KACXC,QAAS,KACTC,cAAe,KACfC,MAAO,KACPC,QAAS,KACTC,WAAY,KACZC,UAAW,EACXC,aAAc,GAAK,EACnBC,WAAY,KACZC,WAAY,KACZC,WAAY,KACZC,WAAY,KACZC,WAAY,KACZC,YAAa,MAEjBC,cAAe,WACX,GAAIC,KAAKnB,aAKL,OAJAmB,KAAKC,cAAcC,OACnBF,KAAKG,aAAaC,KAAK,YAAY,GACnCJ,KAAKK,cAAcD,KAAK,YAAY,QACpCJ,KAAKM,eAAeF,KAAK,YAAY,GAGrCJ,KAAKC,cAAcM,OAEnBP,KAAKQ,QAAQlB,YACbU,KAAKM,eAAeF,KAAK,YAAY,GACrCJ,KAAKS,iBAAiBF,OACtBP,KAAKU,eAAeR,SAEpBF,KAAKM,eAAeF,KAAK,YAAY,GACrCJ,KAAKS,iBAAiBP,OACtBF,KAAKU,eAAeH,QAEpBP,KAAKW,gBACLX,KAAKY,eAAeV,OACpBF,KAAKG,aAAaC,KAAK,YAAY,GACnCJ,KAAKK,cAAcD,KAAK,YAAY,KAEpCJ,KAAKY,eAAeL,OAChBP,KAAKQ,QAAQlB,YACbU,KAAKG,aAAaC,KAAK,YAAY,GACnCJ,KAAKK,cAAcD,KAAK,YAAY,KAEpCJ,KAAKG,aAAaC,KAAK,YAAY,GACnCJ,KAAKK,cAAcD,KAAK,YAAY,MAIhDO,aAAc,WACV,GAAIX,KAAKpB,YAAcoB,KAAKrB,YACxB,OAAO,EAEX,IAAKkC,GAAAA,CAAE,qBAAsBb,KAAKc,OAAOC,UAAUC,GAAG,YAClD,OAAOhB,KAAKlB,SAEhB,IAAImC,EAAUjB,KAAKc,OAAOI,QAAQ,WAC9BC,EACInB,KAAKoB,cAAcC,EAAI,EAAIJ,EAAQI,GACnCJ,EAAQI,EAAIrB,KAAKoB,cAAcC,EAAI,EACvCC,EACItB,KAAKoB,cAAcG,EAAI,EAAIN,EAAQM,GACnCN,EAAQM,EAAIvB,KAAKoB,cAAcG,EAAI,EACvCC,EACIxB,KAAKoB,cAAcK,MAAQ,EAAIR,EAAQQ,OACvCR,EAAQQ,MAAQzB,KAAKoB,cAAcK,MAAQ,EAC/CC,EACI1B,KAAKoB,cAAcO,OAAS,EAAIV,EAAQU,QACxCV,EAAQU,OAAS3B,KAAKoB,cAAcO,OAAS,EAErD,OADA3B,KAAKlB,WAAaqC,GAAMG,GAAME,GAAME,GAC7B1B,KAAKlB,UAEhB8C,MAAO,WACHC,QAAQC,IAAI,SACZ9B,KAAKrB,aAAc,EACnBqB,KAAKkB,QAAQa,QAAQ/B,KAAKoB,eAC1BpB,KAAKgC,0BACLhC,KAAKrB,aAAc,EACnBqB,KAAKD,iBAETkC,OAAQ,WACJJ,QAAQC,IAAI,UACZ,IAAII,EAAOlC,KACPmC,EAAW,CACPF,QAAQ,EACRhD,UAAWe,KAAKQ,QAAQvB,UACxBG,MAAOY,KAAKQ,QAAQ4B,UACpBC,eAAgBrC,KAAKQ,QAAQrB,eAErC+C,EAAKrD,cAAe,EACpBqD,EAAKnC,gBACLc,IAAAA,KAAO,CACHyB,IAAKtC,KAAKQ,QAAQtB,QAClBqD,KAAM,OACNC,KAAML,EACNM,QAAS,SAAUD,EAAME,EAAYC,GACjCT,EAAK1B,QAAQlB,YAAa,EAC1B4C,EAAKrD,cAAe,EACpBqD,EAAKnC,iBAET6C,MAAO,SAAUD,EAAOD,EAAYG,GAChCX,EAAKrD,cAAe,EACpBqD,EAAKnC,gBACL+C,MAAMJ,EAAYG,OAI9BE,KAAM,WACFlB,QAAQC,IAAI,QAAU9B,KAAKhB,YAC3B,IAAIkD,EAAOlC,KACPgD,EAAYhD,KAAKc,OAAOI,QAAQ,WAChCiB,EAAW,CACPd,EAAG2B,EAAU3B,EACbE,EAAGyB,EAAUzB,EACbE,MAAOuB,EAAUvB,MACjBE,OAAQqB,EAAUrB,OAClB1C,UAAWe,KAAKQ,QAAQvB,UACxBG,MAAOY,KAAKQ,QAAQ4B,UACpBC,eAAgBrC,KAAKQ,QAAQrB,eAErC+C,EAAKrD,cAAe,EACpBqD,EAAKnC,gBACLc,IAAAA,KAAO,CACHyB,IAAKtC,KAAKQ,QAAQtB,QAClBqD,KAAM,OACNC,KAAML,EACNM,QAAS,SAAUD,EAAME,EAAYC,GACjCT,EAAK1B,QAAQlB,YAAa,EAC1B4C,EAAKpD,UAAW,EAChBoD,EAAKd,cAAgBP,IAAAA,OAAS,GAAIqB,EAAKhB,QAAQ+B,WAC/Cf,EAAKrD,cAAe,EACpBqD,EAAKnC,iBAET6C,MAAO,SAAUD,EAAOD,EAAYG,GAChCX,EAAKrD,cAAe,EACpBqD,EAAKnC,gBACL+C,MAAMJ,EAAYG,OAI9Bb,wBAAyB,WACrB,IAAIgB,EAAYhD,KAAKc,OAAOI,QAAQ,WACpCL,GAAAA,CAAE,SAAUqB,KAAKgB,KAAKC,KAAKC,KAAKC,MAAML,EAAU3B,IAChDR,GAAAA,CAAE,SAAUqB,KAAKgB,KAAKC,KAAKC,KAAKC,MAAML,EAAUzB,IAChDV,GAAAA,CAAE,SAAUqB,KAAKgB,KAAKC,KAAKC,KAAKC,MAAML,EAAUvB,QAChDZ,GAAAA,CAAE,SAAUqB,KAAKgB,KAAKC,KAAKC,KAAKC,MAAML,EAAUrB,UAEpD2B,eAAgB,WACZtD,KAAKrB,aAAc,EACnBqB,KAAKkB,QAAQqC,SACTvD,KAAKQ,QAAQlB,aAAeU,KAAKW,iBACjCkB,QAAQC,IAAI,eACZ9B,KAAKkB,QAAQa,QAAQ/B,KAAKoB,eAC1BpB,KAAKgC,2BAEThC,KAAKrB,aAAc,GAEvB6E,4BAA6B,WACzB,IAAIvC,EAAUjB,KAAKc,OAAOI,QAAQ,WAC9BuC,EAAS,IAETxC,EAAQQ,MAAQzB,KAAKQ,QAAQkD,cAC7BzC,EAAQU,OAAS3B,KAAKQ,QAAQmD,iBAE9BF,EAAOhC,MAAQzB,KAAKQ,QAAQkD,aAC5BD,EAAO9B,OAAS3B,KAAKQ,QAAQmD,cACzB1C,EAAQI,EAAIrB,KAAKQ,QAAQkD,aAAe1D,KAAKQ,QAAQX,WACrD4D,EAAOpC,EAAIrB,KAAKQ,QAAQX,WAAaG,KAAKQ,QAAQkD,aAElDD,EAAOpC,EAAIJ,EAAQI,EAEnBJ,EAAQM,EAAIvB,KAAKQ,QAAQmD,cAAgB3D,KAAKQ,QAAQV,YACtD2D,EAAOlC,EAAIvB,KAAKQ,QAAQV,YAAcE,KAAKQ,QAAQmD,cAEnDF,EAAOlC,EAAIN,EAAQM,EAEvBkC,EAAOG,OAAS3C,EAAQ2C,OACxBH,EAAOI,OAAS5C,EAAQ4C,OACxBJ,EAAOK,OAAS7C,EAAQ6C,OACxB9D,KAAKrB,aAAc,EACnBqB,KAAKkB,QAAQa,QAAQ0B,GACrBzD,KAAKrB,aAAc,IAG3BoF,M,EAAI,yBAAE,yHACK,kCADL,cACwBC,SAEtB9B,EAAOlC,MACckD,IAAInC,SAASkD,SAAS,UAC3CC,EAAa,WAAahC,EAAK1B,QAAQxB,WACNkD,EAAK1B,QAAQxB,WAC9CmF,EAAW,iBAAmBjC,EAAK1B,QAAQxB,WAC/CkD,EAAKlD,WAAakD,EAAK1B,QAAQxB,WAC/BkD,EAAKpB,OAASD,GAAAA,CAAE,iBAAkBqB,EAAKgB,KACvChB,EAAKxB,eAAiBG,GAAAA,CAAEqD,EAAa,mBACrChC,EAAKzB,iBAAmBI,GAAAA,CAAEqD,EAAa,qBACvChC,EAAKtB,eAAiBC,GAAAA,CAAEqD,EAAa,mBACrChC,EAAKjC,cAAgBY,GAAAA,CAAEqD,EAAa,kBACpChC,EAAK/B,aAAeU,GAAAA,CAAEsD,EAAW,gBACjCjC,EAAK5B,eAAiBO,GAAAA,CAAEsD,EAAW,kBACnCjC,EAAK7B,cAAgBQ,GAAAA,CAAEsD,EAAW,iBAClCjC,EAAKkC,iBAAmBvD,GAAAA,CAAE,mBAG1BqB,EAAK1B,QAAQ6D,UAAYC,WAAWpC,EAAK1B,QAAQ6D,WACjDnC,EAAK1B,QAAQ+D,UAAYD,WAAWpC,EAAK1B,QAAQ+D,WACjDrC,EAAK1B,QAAQgE,UAAYF,WAAWpC,EAAK1B,QAAQgE,WACjDtC,EAAK1B,QAAQiE,UAAYH,WAAWpC,EAAK1B,QAAQiE,WACjDvC,EAAK1B,QAAQX,WAAayE,WAAWpC,EAAK1B,QAAQX,YAClDqC,EAAK1B,QAAQV,YAAcwE,WAAWpC,EAAK1B,QAAQV,aACnDoC,EAAK1B,QAAQkD,aAAeY,WAAWpC,EAAK1B,QAAQkD,cACpDxB,EAAK1B,QAAQmD,cAAgBW,WAAWpC,EAAK1B,QAAQmD,eACrDzB,EAAK1B,QAAQlB,WAAwC,QAA3B4C,EAAK1B,QAAQlB,WAGvC4C,EAAKd,cAAgB,CAKjBC,EAAGrB,KAAKQ,QAAQ6D,UAChB9C,EAAGvB,KAAKQ,QAAQ+D,UAChB9C,MAAOzB,KAAKQ,QAAQgE,UACpB7C,OAAQ3B,KAAKQ,QAAQiE,UACrBb,OAAQ,EACRC,OAAQ,EACRC,OAAQ,GAIZ5B,EAAKnC,gBAGLmC,EAAK7B,cAAcqE,OAAM,WACrBxC,EAAKN,WAETM,EAAK5B,eAAeoE,OAAM,WACtBxC,EAAKD,YAETC,EAAK/B,aAAauE,OAAM,WACpBxC,EAAKa,UAETb,EAAKkC,iBAAiBO,GAClB,QACA,CAAE3F,WAAYkD,EAAKlD,aACnB,SAAU4F,GACF1C,EAAKvB,gBACLuB,EAAKa,UAMb8B,EAAgB,CAChBxF,QAAS6C,EAAK1B,QAAQnB,QACtBmD,KAAMN,EAAKd,cACX0D,UAAU,EACVC,aAAc,EACdC,YAAaV,WAAWpC,EAAK1B,QAAQhB,cACrCyF,SAAU/C,EAAK1B,QAAQjB,UACvB2F,SAAS,EACTC,KAAM,SAAUC,GACRlD,EAAKtD,YAAcsD,EAAKvD,cAG5BuD,EAAKsB,8BACLtB,EAAKnC,gBACLmC,EAAKF,4BAETqD,MAAO,WACHnD,EAAKN,QACLM,EAAKtD,YAAa,IAG1BsD,EAAKpB,OAAOI,QAAQ2D,GACpB3C,EAAKhB,QAAUgB,EAAKpB,OAAO0B,KAAK,WAChCN,EAAKpB,OAAO6D,GAAG,0BAA0B,WACrCzC,EAAKoB,oBA7FP,gDAAF,E,8KAAA,8CClMO/E,EAAAA,EAAAA,OAAY,CACvBC,KAAM,gBACNC,QAAS,6BACTC,OAAQ,SAER4G,uBAAwB,SAAUC,GAC9B1D,QAAQC,IAAI,iBACZ,IAAIsD,EAAIvE,IAAAA,MAAQ,0BAChB0E,EAAY9G,QAAQ2G,IAExBI,UAAW,SAAUC,GACjB,IAAIC,EAAM7E,GAAAA,CAAE4E,GACRE,EAAM9E,GAAAA,CAAE6E,EAAI3E,UAChB,IAAI2E,EAAIzB,SAAS,UAAjB,CAKApD,GAAAA,CAAE,4BAA6B8E,GAAKC,YAAY,UAAUC,SAAS,YAGnEH,EAAIE,YAAY,YAAYC,SAAS,UAGrC,IAAIC,EAAYjF,GAAAA,CAAEA,GAAAA,CAAE6E,EAAIlD,KAAK,mBACzBuD,EAASlF,GAAAA,CAAEiF,EAAU/E,UACTF,GAAAA,CAAE,6BAA8BkF,GAEtCH,YAAY,UAAUC,SAAS,YAEzCC,EAAUF,YAAY,YAAYC,SAAS,UAG3C,IAAIN,EAAc1E,GAAAA,CAAE,iBAAkBiF,GACtC9F,KAAKsF,uBAAuBC,KAEhCS,uBAAwB,SAAUP,GAE9B,IAAIC,EAAM7E,GAAAA,CAAE4E,GACRQ,EAAcpF,GAAAA,CAAE,qBAAsB6E,GACtCQ,EAAWrF,GAAAA,CAAE,gBAAiBoF,GAC9BE,EAAS7B,WAAW2B,EAAYzD,KAAK,iBACrC4D,EAAU9B,WAAW2B,EAAYzD,KAAK,kBACtC6D,EAAUX,EAAIjE,QACdE,EAAS,KAQTA,EAHA0E,GAAWF,EAGFC,EAICA,EAAUC,EAAWF,EAEnCF,EAAYxE,MAAM4E,GAClBJ,EAAYtE,OAAOA,GACnBuE,EAASzE,MAAM4E,GACfH,EAASvE,OAAOA,IAEpBoC,KAAM,WACF,6BAEA,IAAI7B,EAAOlC,KAAcsG,SAASC,cAAc,2BAC1CC,iBAAiB,gBAAgB,SAAU5B,GAE7C,IAAIW,EAAc1E,GAAAA,CAAE,+CAAgD4F,WACpEzG,KAAKsF,uBAAuBC,MAEhC1E,GAAAA,CAAE,YAAaqB,EAAKgB,KAAKwD,MAAK,SAAUC,GAEpC9F,GAAAA,CAAE,8BAA+BA,GAAAA,CADlBb,OAC+B0G,MAAK,SAAUE,GACzD,IAAInB,EAAKzF,KACTkC,EAAK8D,uBAAuBP,GAC5B5E,GAAAA,CAAE4E,GAAIf,OAAM,WACRxC,EAAKsD,UAAUC,eC3EnCoB,EAAAA,EAAAA","sources":["webpack://plone-imagecropping/./resources/js/cropperpattern.js","webpack://plone-imagecropping/./resources/js/cropscaleselect.js","webpack://plone-imagecropping/./resources/bundle.js"],"sourcesContent":["import $ from \"jquery\";\nimport Base from \"@patternslib/patternslib/src/core/base\";\n\nexport default Base.extend({\n    name: \"image-cropper\",\n    trigger: \".pat-image-cropper\",\n    parser: \"mockup\",\n    while_reset: false,\n    while_init: true,\n    while_saving: false,\n    _changed: false,\n    defaults: {\n        identifier: null,\n        fieldname: null,\n        saveurl: null,\n        authenticator: null,\n        scale: null,\n        preview: null,\n        is_cropped: null,\n        view_mode: 3,\n        aspect_ratio: 16 / 9,\n        currrent_x: null,\n        currrent_y: null,\n        currrent_w: null,\n        currrent_h: null,\n        true_width: null,\n        true_height: null,\n    },\n    update_badges: function () {\n        if (this.while_saving) {\n            this.$badge_saving.show();\n            this.$button_save.prop(\"disabled\", true);\n            this.$button_reset.prop(\"disabled\", true);\n            this.$button_remove.prop(\"disabled\", true);\n            return;\n        } else {\n            this.$badge_saving.hide();\n        }\n        if (this.options.is_cropped) {\n            this.$button_remove.prop(\"disabled\", false);\n            this.$badge_uncropped.hide();\n            this.$badge_cropped.show();\n        } else {\n            this.$button_remove.prop(\"disabled\", true);\n            this.$badge_uncropped.show();\n            this.$badge_cropped.hide();\n        }\n        if (this.crop_changed()) {\n            this.$badge_changed.show();\n            this.$button_save.prop(\"disabled\", false);\n            this.$button_reset.prop(\"disabled\", false);\n        } else {\n            this.$badge_changed.hide();\n            if (this.options.is_cropped) {\n                this.$button_save.prop(\"disabled\", true);\n                this.$button_reset.prop(\"disabled\", true);\n            } else {\n                this.$button_save.prop(\"disabled\", false);\n                this.$button_reset.prop(\"disabled\", true);\n            }\n        }\n    },\n    crop_changed: function () {\n        if (this.while_init || this.while_reset) {\n            return false;\n        }\n        if (!$(\".cropper-container\", this.$image.parent()).is(\":visible\")) {\n            return this._changed;\n        }\n        var current = this.$image.cropper(\"getData\");\n        var xc =\n                this.original_data.x - 1 < current.x &&\n                current.x < this.original_data.x + 1,\n            yc =\n                this.original_data.y - 1 < current.y &&\n                current.y < this.original_data.y + 1,\n            wc =\n                this.original_data.width - 1 < current.width &&\n                current.width < this.original_data.width + 1,\n            hc =\n                this.original_data.height - 1 < current.height &&\n                current.height < this.original_data.height + 1;\n        this._changed = !(xc && yc && wc && hc);\n        return this._changed;\n    },\n    reset: function () {\n        console.log(\"RESET\");\n        this.while_reset = true;\n        this.cropper.setData(this.original_data);\n        this.visualize_selected_area();\n        this.while_reset = false;\n        this.update_badges();\n    },\n    remove: function () {\n        console.log(\"REMOVE\");\n        var self = this,\n            postData = {\n                remove: true,\n                fieldname: this.options.fieldname,\n                scale: this.options.scalename,\n                _authenticator: this.options.authenticator,\n            };\n        self.while_saving = true;\n        self.update_badges();\n        $.ajax({\n            url: this.options.saveurl,\n            type: \"POST\",\n            data: postData,\n            success: function (data, textStatus, jqXHR) {\n                self.options.is_cropped = false;\n                self.while_saving = false;\n                self.update_badges();\n            },\n            error: function (jqXHR, textStatus, errorThrown) {\n                self.while_saving = false;\n                self.update_badges();\n                alert(textStatus, errorThrown);\n            },\n        });\n    },\n    save: function () {\n        console.log(\"SAVE \" + this.identifier);\n        var self = this,\n            crop_data = this.$image.cropper(\"getData\"),\n            postData = {\n                x: crop_data.x,\n                y: crop_data.y,\n                width: crop_data.width,\n                height: crop_data.height,\n                fieldname: this.options.fieldname,\n                scale: this.options.scalename,\n                _authenticator: this.options.authenticator,\n            };\n        self.while_saving = true;\n        self.update_badges();\n        $.ajax({\n            url: this.options.saveurl,\n            type: \"POST\",\n            data: postData,\n            success: function (data, textStatus, jqXHR) {\n                self.options.is_cropped = true;\n                self._changed = false;\n                self.original_data = $.extend({}, self.cropper.getData());\n                self.while_saving = false;\n                self.update_badges();\n            },\n            error: function (jqXHR, textStatus, errorThrown) {\n                self.while_saving = false;\n                self.update_badges();\n                alert(textStatus, errorThrown);\n            },\n        });\n    },\n    visualize_selected_area: function () {\n        var crop_data = this.$image.cropper(\"getData\");\n        $(\".cropx\", self.$el).text(Math.round(crop_data.x));\n        $(\".cropy\", self.$el).text(Math.round(crop_data.y));\n        $(\".cropw\", self.$el).text(Math.round(crop_data.width));\n        $(\".croph\", self.$el).text(Math.round(crop_data.height));\n    },\n    notify_visible: function () {\n        this.while_reset = true;\n        this.cropper.resize();\n        if (this.options.is_cropped && !this.crop_changed()) {\n            console.log(\"set to orig\");\n            this.cropper.setData(this.original_data);\n            this.visualize_selected_area();\n        }\n        this.while_reset = false;\n    },\n    limit_minimum_cropping_size: function () {\n        var current = this.$image.cropper(\"getData\"),\n            newbox = {};\n        if (\n            current.width < this.options.target_width ||\n            current.height < this.options.target_height\n        ) {\n            newbox.width = this.options.target_width;\n            newbox.height = this.options.target_height;\n            if (current.x + this.options.target_width > this.options.true_width) {\n                newbox.x = this.options.true_width - this.options.target_width;\n            } else {\n                newbox.x = current.x;\n            }\n            if (current.y + this.options.target_height > this.options.true_height) {\n                newbox.y = this.options.true_height - this.options.target_height;\n            } else {\n                newbox.y = current.y;\n            }\n            newbox.rotate = current.rotate;\n            newbox.scaleX = current.scaleX;\n            newbox.scaleY = current.scaleY;\n            this.while_reset = true;\n            this.cropper.setData(newbox);\n            this.while_reset = false;\n        }\n    },\n    init: async function () {\n        (await import(\"cropper\")).default;\n\n        var self = this,\n            area_inactive = self.$el.parent().hasClass(\"d-none\"),\n            sel_select = \"#select-\" + self.options.identifier,\n            sel_cropper = \"#croppingarea-\" + self.options.identifier,\n            sel_form = \"#croppingarea-\" + self.options.identifier;\n        self.identifier = self.options.identifier;\n        self.$image = $(\"img.main-image\", self.$el);\n        self.$badge_cropped = $(sel_select + \" .badge.cropped\");\n        self.$badge_uncropped = $(sel_select + \" .badge.uncropped\");\n        self.$badge_changed = $(sel_select + \" .badge.changed\");\n        self.$badge_saving = $(sel_select + \" .badge.saving\");\n        self.$button_save = $(sel_form + \" button.save\");\n        self.$button_remove = $(sel_form + \" button.remove\");\n        self.$button_reset = $(sel_form + \" button.reset\");\n        self.$button_save_all = $(\"button.save-all\");\n\n        // we need to make coords floats\n        self.options.current_x = parseFloat(self.options.current_x);\n        self.options.current_y = parseFloat(self.options.current_y);\n        self.options.current_w = parseFloat(self.options.current_w);\n        self.options.current_h = parseFloat(self.options.current_h);\n        self.options.true_width = parseFloat(self.options.true_width);\n        self.options.true_height = parseFloat(self.options.true_height);\n        self.options.target_width = parseFloat(self.options.target_width);\n        self.options.target_height = parseFloat(self.options.target_height);\n        self.options.is_cropped = self.options.is_cropped == \"True\" ? true : false;\n\n        // the scale we came in with from server side\n        self.original_data = {\n            // x: 100,\n            // y: 100,\n            // width: 1024,\n            // height: 768,\n            x: this.options.current_x,\n            y: this.options.current_y,\n            width: this.options.current_w,\n            height: this.options.current_h,\n            rotate: 0,\n            scaleX: 1,\n            scaleY: 1,\n        };\n\n        // hide badges\n        self.update_badges();\n\n        // bind buttons\n        self.$button_reset.click(function () {\n            self.reset();\n        });\n        self.$button_remove.click(function () {\n            self.remove();\n        });\n        self.$button_save.click(function () {\n            self.save();\n        });\n        self.$button_save_all.on(\n            \"click\",\n            { identifier: self.identifier },\n            function (event) {\n                if (self.crop_changed()) {\n                    self.save();\n                }\n            }\n        );\n\n        // configure and init cropper\n        var configuration = {\n            preview: self.options.preview,\n            data: self.original_data, // for some reasons these are not respected\n            autoCrop: true,\n            autoCropArea: 1,\n            aspectRatio: parseFloat(self.options.aspect_ratio),\n            viewMode: self.options.view_mode,\n            restore: false,\n            crop: function (e) {\n                if (self.while_init || self.while_reset) {\n                    return;\n                }\n                self.limit_minimum_cropping_size();\n                self.update_badges();\n                self.visualize_selected_area();\n            },\n            built: function () {\n                self.reset();\n                self.while_init = false;\n            },\n        };\n        self.$image.cropper(configuration);\n        self.cropper = self.$image.data(\"cropper\");\n        self.$image.on(\"CROPPERPATTERN.VISIBLE\", function () {\n            self.notify_visible();\n        });\n    },\n});\n","import $ from \"jquery\";\nimport Base from \"@patternslib/patternslib/src/core/base\";\n\nexport default Base.extend({\n    name: \"imagecropsave\",\n    trigger: \".pat-imagecrop-scaleselect\",\n    parser: \"mockup\",\n    // A shortcut for triggering custom events\n    trigger_notify_visible: function ($cropperimg) {\n        console.log(\"Trigger event\");\n        var e = $.Event(\"CROPPERPATTERN.VISIBLE\");\n        $cropperimg.trigger(e);\n    },\n    toggle_li: function (li) {\n        var $li = $(li),\n            $ul = $($li.parent());\n        if ($li.hasClass(\"active\")) {\n            // ignore any active\n            return;\n        }\n        // set prior active to inactive\n        $(\"li.list-group-item.active\", $ul).removeClass(\"active\").addClass(\"inactive\");\n\n        // set clicked tab to active\n        $li.removeClass(\"inactive\").addClass(\"active\");\n\n        // activate/ deactivate cropping area\n        var $new_area = $($($li.data(\"cropping-area\"))),\n            $areas = $($new_area.parent()),\n            $old_area = $(\".singlecroppingarea.active\", $areas);\n\n        $old_area.removeClass(\"active\").addClass(\"inactive\");\n\n        $new_area.removeClass(\"inactive\").addClass(\"active\");\n\n        // trigger repaint\n        var $cropperimg = $(\"img.main-image\", $new_area);\n        this.trigger_notify_visible($cropperimg);\n    },\n    set_preview_dimensions: function (li) {\n        // console.log('SET_PREVIEW_DIMENSIONS');\n        var $li = $(li),\n            $pcontainer = $(\".preview-container\", $li),\n            $preview = $(\".crop-preview\", $pcontainer),\n            twidth = parseFloat($pcontainer.data(\"target-width\")),\n            theight = parseFloat($pcontainer.data(\"target-height\")),\n            liwidth = $li.width(),\n            height = null;\n        // console.log('liwidth');\n        // console.log(liwidth);\n        // console.log($preview);\n\n        if (liwidth >= twidth) {\n            // if smaller set to real value\n            // console.log('-> smaller');\n            height = theight;\n        } else {\n            // if greater scale down, respect aspect ratio\n            // console.log('->  greater');\n            height = (theight * liwidth) / twidth;\n        }\n        $pcontainer.width(liwidth);\n        $pcontainer.height(height);\n        $preview.width(liwidth);\n        $preview.height(height);\n    },\n    init: function () {\n        import(\"../scss/cropscaleselect.scss\");\n\n        var self = this, tabEl = document.querySelector('a[data-bs-toggle=\"tab\"]');\n        tabEl.addEventListener('shown.bs.tab', function (event) {\n            // trigger resize\n            var $cropperimg = $('div.singlecroppingarea.active img.main-image', $fieldset);\n            this.trigger_notify_visible($cropperimg);\n        });\n        $(\".tab-pane\", self.$el).each(function (findex) {\n            var fieldset = this;\n            $(\"li.list-group-item.scalable\", $(fieldset)).each(function (lindex) {\n                var li = this;\n                self.set_preview_dimensions(li);\n                $(li).click(function () {\n                    self.toggle_li(li);\n                });\n            });\n        });\n    },\n});\n","import \"@patternslib/patternslib/src/globals\";\nimport registry from \"@patternslib/patternslib/src/core/registry\";\n\nimport \"./js/cropperpattern\";\nimport \"./js/cropscaleselect\";\n\nregistry.init();\n"],"names":["Base","name","trigger","parser","while_reset","while_init","while_saving","_changed","defaults","identifier","fieldname","saveurl","authenticator","scale","preview","is_cropped","view_mode","aspect_ratio","currrent_x","currrent_y","currrent_w","currrent_h","true_width","true_height","update_badges","this","$badge_saving","show","$button_save","prop","$button_reset","$button_remove","hide","options","$badge_uncropped","$badge_cropped","crop_changed","$badge_changed","$","$image","parent","is","current","cropper","xc","original_data","x","yc","y","wc","width","hc","height","reset","console","log","setData","visualize_selected_area","remove","self","postData","scalename","_authenticator","url","type","data","success","textStatus","jqXHR","error","errorThrown","alert","save","crop_data","getData","$el","text","Math","round","notify_visible","resize","limit_minimum_cropping_size","newbox","target_width","target_height","rotate","scaleX","scaleY","init","default","hasClass","sel_select","sel_form","$button_save_all","current_x","parseFloat","current_y","current_w","current_h","click","on","event","configuration","autoCrop","autoCropArea","aspectRatio","viewMode","restore","crop","e","built","trigger_notify_visible","$cropperimg","toggle_li","li","$li","$ul","removeClass","addClass","$new_area","$areas","set_preview_dimensions","$pcontainer","$preview","twidth","theight","liwidth","document","querySelector","addEventListener","$fieldset","each","findex","lindex","registry"],"sourceRoot":""}