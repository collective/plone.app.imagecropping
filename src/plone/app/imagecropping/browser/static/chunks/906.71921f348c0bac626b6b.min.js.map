{"version":3,"file":"chunks/906.71921f348c0bac626b6b.min.js","mappings":";6jBACA,4gGAAAA,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,0oDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,sQ,gzBAGAC,EAAAA,EAAAA,SAAiB,QACjB,I,EA2MQ,EA3MFC,EAAMD,EAAAA,EAAAA,UAAkB,qBAEfE,EAAAA,EAAAA,OAAY,CACvBC,KAAM,gBACNC,QAAS,qBACTC,OAAQ,SACRC,aAAa,EACbC,YAAY,EACZC,cAAc,EACdC,UAAU,EACVC,SAAU,CACNC,WAAY,KACZC,UAAW,KACXC,QAAS,KACTC,cAAe,KACfC,MAAO,KACPC,QAAS,KACTC,WAAY,KACZC,UAAW,EACXC,aAAc,GAAK,EACnBC,WAAY,KACZC,WAAY,KACZC,WAAY,KACZC,WAAY,KACZC,WAAY,KACZC,YAAa,MAGjBC,cAAe,WACX,GAAIC,KAAKnB,aAKL,OAJAmB,KAAKC,cAAcC,OACnBF,KAAKG,aAAaC,KAAK,YAAY,GACnCJ,KAAKK,cAAcD,KAAK,YAAY,QACpCJ,KAAKM,eAAeF,KAAK,YAAY,GAGrCJ,KAAKC,cAAcM,OAEnBP,KAAKQ,QAAQlB,YACbU,KAAKM,eAAeF,KAAK,YAAY,GACrCJ,KAAKK,cAAcD,KAAK,YAAY,GACpCJ,KAAKS,iBAAiBF,OACtBP,KAAKU,eAAeR,SAEpBF,KAAKM,eAAeF,KAAK,YAAY,GACrCJ,KAAKK,cAAcD,KAAK,YAAY,GACpCJ,KAAKS,iBAAiBP,OACtBF,KAAKU,eAAeH,QAEpBP,KAAKW,gBACLX,KAAKY,eAAeV,OACpBF,KAAKG,aAAaC,KAAK,YAAY,GACnCJ,KAAKK,cAAcD,KAAK,YAAY,KAEpCJ,KAAKY,eAAeL,OAChBP,KAAKQ,QAAQlB,YACbU,KAAKG,aAAaC,KAAK,YAAY,GACnCJ,KAAKK,cAAcD,KAAK,YAAY,KAEpCJ,KAAKG,aAAaC,KAAK,YAAY,GACnCJ,KAAKK,cAAcD,KAAK,YAAY,IAG/C,EAEDO,aAAc,WACV,IAAKE,IAAE,qBAAsBb,KAAKc,OAAOC,UAAUC,GAAG,YAClD,OAAOhB,KAAKlB,SAEhB,SAASmC,EAAoBC,EAAGC,GAC5B,OAAQD,GAAIC,EAAE,GAAQD,GAAIC,EAAE,CAC/B,CACD,IAAIC,EAAUpB,KAAKqB,QAAQC,UACvBC,EAAKN,EAAoBG,EAAQF,EAAGlB,KAAKwB,cAAcN,GACvDO,EAAKR,EAAoBG,EAAQD,EAAGnB,KAAKwB,cAAcL,GACvDO,EAAKT,EAAoBG,EAAQO,MAAO3B,KAAKwB,cAAcG,OAC3DC,EAAKX,EAAoBG,EAAQS,OAAQ7B,KAAKwB,cAAcK,QAEhE,OADA7B,KAAKlB,WAAayC,GAAME,GAAMC,GAAME,GAC7B5B,KAAKlB,QACf,EAEDgD,MAAO,WACHxD,EAAIyD,KAAK,SACT/B,KAAKrB,aAAc,EACnBqB,KAAKqB,QAAQW,QAAQhC,KAAKiC,cAC1BjC,KAAKkC,0BACLlC,KAAKrB,aAAc,EACnBqB,KAAKD,eACR,EAEDoC,OAAQ,WACJ7D,EAAIyD,KAAK,UACT,IAAIK,EAAOpC,KACPqC,EAAW,CACPF,QAAQ,EACRlD,UAAWe,KAAKQ,QAAQvB,UACxBG,MAAOY,KAAKQ,QAAQ8B,UACpBC,eAAgBvC,KAAKQ,QAAQrB,eAErCiD,EAAKvD,cAAe,EACpBuD,EAAKrC,gBACLc,IAAAA,KAAO,CACH2B,IAAKxC,KAAKQ,QAAQtB,QAClBuD,KAAM,OACNC,KAAML,EACNM,QAAS,SAAUD,EAAME,EAAYC,GACjCT,EAAK5B,QAAQlB,YAAa,EAC1B8C,EAAKvD,cAAe,EACpBuD,EAAKZ,cAAgBY,EAAKH,aAC1BG,EAAKN,OACR,EACDgB,MAAO,SAAUD,EAAOD,EAAYG,GAChCX,EAAKvD,cAAe,EACpBuD,EAAKrC,gBACLiD,MAAMJ,EAAYG,EACrB,GAER,EAEDE,KAAM,WACF3E,EAAIyD,KAAK,QAAU/B,KAAKhB,YACxB,IAAIoD,EAAOpC,KACPkD,EAAYlD,KAAKqB,QAAQC,SAAQ,GACjCe,EAAW,CACPnB,EAAGgC,EAAUhC,EACbC,EAAG+B,EAAU/B,EACbQ,MAAOuB,EAAUvB,MACjBE,OAAQqB,EAAUrB,OAClB5C,UAAWe,KAAKQ,QAAQvB,UACxBG,MAAOY,KAAKQ,QAAQ8B,UACpBC,eAAgBvC,KAAKQ,QAAQrB,eAErCiD,EAAKvD,cAAe,EACpBuD,EAAKrC,gBACLc,IAAAA,KAAO,CACH2B,IAAKxC,KAAKQ,QAAQtB,QAClBuD,KAAM,OACNC,KAAML,EACNM,QAAS,SAAUD,EAAME,EAAYC,GACjCT,EAAK5B,QAAQlB,YAAa,EAC1B8C,EAAKtD,UAAW,EAChBsD,EAAKZ,cAAL,OACOY,EAAKZ,eACLY,EAAKf,QAAQC,SAAQ,IAE5Bc,EAAKvD,cAAe,EACpBuD,EAAKrC,eACR,EACD+C,MAAO,SAAUD,EAAOD,EAAYG,GAChCX,EAAKvD,cAAe,EACpBuD,EAAKrC,gBACLiD,MAAMJ,EAAYG,EACrB,GAER,EAEDb,wBAAyB,WACrB,IAAIgB,EAAYlD,KAAKqB,QAAQC,SAAQ,GACrCT,IAAE,SAAUuB,KAAKe,KAAKC,KAAKC,KAAKC,MAAMJ,EAAUhC,IAChDL,IAAE,SAAUuB,KAAKe,KAAKC,KAAKC,KAAKC,MAAMJ,EAAU/B,IAChDN,IAAE,SAAUuB,KAAKe,KAAKC,KAAKC,KAAKC,MAAMJ,EAAUvB,QAChDd,IAAE,SAAUuB,KAAKe,KAAKC,KAAKC,KAAKC,MAAMJ,EAAUrB,QACnD,EAED0B,eAAgB,WACZvD,KAAKrB,aAAc,EACnBqB,KAAKqB,QAAQmC,SACTxD,KAAKQ,QAAQlB,aACbhB,EAAIyD,KAAK,kBACT/B,KAAKqB,QAAQW,QAAQhC,KAAKwB,eAC1BxB,KAAKkC,2BAETlC,KAAKrB,aAAc,CACtB,EAED8E,4BAA6B,WACzB,IAAIrC,EAAUpB,KAAKqB,QACfqC,EAAS,CAAC,GAEVtC,EAAQO,MAAQ3B,KAAKQ,QAAQmD,cAC7BvC,EAAQS,OAAS7B,KAAKQ,QAAQoD,iBAE9BF,EAAO/B,MAAQ3B,KAAKQ,QAAQmD,aAC5BD,EAAO7B,OAAS7B,KAAKQ,QAAQoD,cACzBxC,EAAQF,EAAIlB,KAAKQ,QAAQmD,aAAe3D,KAAKQ,QAAQX,WACrD6D,EAAOxC,EAAIlB,KAAKQ,QAAQX,WAAaG,KAAKQ,QAAQmD,aAElDD,EAAOxC,EAAIE,EAAQF,EAEnBE,EAAQD,EAAInB,KAAKQ,QAAQoD,cAAgB5D,KAAKQ,QAAQV,YACtD4D,EAAOvC,EAAInB,KAAKQ,QAAQV,YAAcE,KAAKQ,QAAQoD,cAEnDF,EAAOvC,EAAIC,EAAQD,EAEvBuC,EAAOG,OAASzC,EAAQyC,OACxBH,EAAOI,OAAS1C,EAAQ0C,OACxBJ,EAAOK,OAAS3C,EAAQ2C,OACxB/D,KAAKrB,aAAc,EACnBqB,KAAKqB,QAAQW,QAAQ0B,GACrB1D,KAAKrB,aAAc,EAE1B,EAEDqF,M,EAAI,UAAE,8GACqB,kCADrB,OACIC,EADJ,OAC0CC,QAGxCC,EAAa,YADb/B,EAAOpC,MACwBQ,QAAQxB,WACvCoF,EAAW,iBAAmBhC,EAAK5B,QAAQxB,WAC/CoD,EAAKpD,WAAaoD,EAAK5B,QAAQxB,WAC/BoD,EAAKtB,OAASD,IAAE,iBAAkBuB,EAAKe,KACvCf,EAAK1B,eAAiBG,IAAEsD,EAAa,mBACrC/B,EAAK3B,iBAAmBI,IAAEsD,EAAa,qBACvC/B,EAAKxB,eAAiBC,IAAEsD,EAAa,mBACrC/B,EAAKnC,cAAgBY,IAAEsD,EAAa,kBACpC/B,EAAKjC,aAAeU,IAAEuD,EAAW,gBACjChC,EAAK9B,eAAiBO,IAAEuD,EAAW,kBACnChC,EAAK/B,cAAgBQ,IAAEuD,EAAW,iBAClChC,EAAKiC,iBAAmBxD,IAAE,mBAG1BuB,EAAK5B,QAAQ8D,UAAYC,WAAWnC,EAAK5B,QAAQ8D,WACjDlC,EAAK5B,QAAQgE,UAAYD,WAAWnC,EAAK5B,QAAQgE,WACjDpC,EAAK5B,QAAQiE,UAAYF,WAAWnC,EAAK5B,QAAQiE,WACjDrC,EAAK5B,QAAQkE,UAAYH,WAAWnC,EAAK5B,QAAQkE,WACjDtC,EAAK5B,QAAQmE,UAAYJ,WAAWnC,EAAK5B,QAAQmE,WACjDvC,EAAK5B,QAAQoE,UAAYL,WAAWnC,EAAK5B,QAAQoE,WACjDxC,EAAK5B,QAAQqE,UAAYN,WAAWnC,EAAK5B,QAAQqE,WACjDzC,EAAK5B,QAAQsE,UAAYP,WAAWnC,EAAK5B,QAAQsE,WACjD1C,EAAK5B,QAAQX,WAAa0E,WAAWnC,EAAK5B,QAAQX,YAClDuC,EAAK5B,QAAQV,YAAcyE,WAAWnC,EAAK5B,QAAQV,aACnDsC,EAAK5B,QAAQmD,aAAeY,WAAWnC,EAAK5B,QAAQmD,cACpDvB,EAAK5B,QAAQoD,cAAgBW,WAAWnC,EAAK5B,QAAQoD,eACrDxB,EAAK5B,QAAQlB,WAAwC,QAA3B8C,EAAK5B,QAAQlB,WAEvC8C,EAAKH,aAAe,CAChBf,EAAGlB,KAAKQ,QAAQ8D,UAChBnD,EAAGnB,KAAKQ,QAAQgE,UAChB7C,MAAO3B,KAAKQ,QAAQiE,UACpB5C,OAAQ7B,KAAKQ,QAAQkE,UACrBb,OAAQ,EACRC,OAAQ,EACRC,OAAQ,GAGZ3B,EAAKZ,cAAgB,CAKjBN,EAAGlB,KAAKQ,QAAQmE,UAChBxD,EAAGnB,KAAKQ,QAAQoE,UAChBjD,MAAO3B,KAAKQ,QAAQqE,UACpBhD,OAAQ7B,KAAKQ,QAAQsE,UACrBjB,OAAQ,EACRC,OAAQ,EACRC,OAAQ,GAIZ3B,EAAKrC,gBAGLqC,EAAK/B,cAAc0E,GAAG,SAAS,WAC3B3C,EAAKN,OACR,IACDM,EAAK9B,eAAeyE,GAAG,SAAS,WAC5B3C,EAAKD,QACR,IACDC,EAAKjC,aAAa4E,GAAG,SAAS,WAC1B3C,EAAKa,MACR,IACDb,EAAKiC,iBAAiBU,GAClB,SACA,SAAUC,GACF5C,EAAKzB,gBACLyB,EAAKa,MAEZ,IAIDgC,EAAgB,CAChB5F,QAAS+C,EAAK5B,QAAQnB,QACtBqD,KAAMN,EAAKZ,cACX0D,UAAU,EACVC,aAAc,EACdC,YAAab,WAAWnC,EAAK5B,QAAQhB,cACrC6F,SAAUjD,EAAK5B,QAAQjB,UACvB+F,SAAS,GAGTC,EAASnD,EAAKtB,OAAO,GAEzBsB,EAAKf,QAAU,IAAI4C,EAAQsB,EAAQN,GAGnCM,EAAOC,iBAAiB,QAAQ,SAAUC,GACnCrD,EAAKxD,YAAcwD,EAAKzD,cAG3ByD,EAAKqB,8BACLrB,EAAKrC,gBACLqC,EAAKF,0BACR,IACDqD,EAAOC,iBAAiB,SAAS,SAASC,GAEtCrD,EAAKxD,YAAa,CACrB,IAEDwD,EAAKtB,OAAOiE,GAAG,0BAA0B,WACrC3C,EAAKmB,gBACR,IA7GC,gDAAF,E,8KAAA,8CC5MRlF,EAAAA,EAAAA,SAAiB,QACLA,EAAAA,EAAAA,UAAkB,6BAEfE,EAAAA,EAAAA,OAAY,CACvBC,KAAM,gBACNC,QAAS,6BACTC,OAAQ,SAGRgH,uBAAwB,SAAUC,GAC9B,IAAIF,EAAI5E,IAAAA,MAAQ,0BAChB8E,EAAYlH,QAAQgH,EACvB,EAEDG,UAAW,SAAUC,GACjB,IAAIC,EAAMjF,IAAEgF,GACRE,EAAMlF,IAAEiF,EAAI/E,UAChB,IAAI+E,EAAIE,SAAS,UAAjB,CAKAnF,IAAE,4BAA6BkF,GAAKE,YAAY,UAAUC,SAAS,YAGnEJ,EAAIG,YAAY,YAAYC,SAAS,UAGrC,IAAIC,EAAYtF,IAAEA,IAAEiF,EAAIpD,KAAK,mBACzB0D,EAASvF,IAAEsF,EAAUpF,UACTF,IAAE,6BAA8BuF,GAEtCH,YAAY,UAAUC,SAAS,YAEzCC,EAAUF,YAAY,YAAYC,SAAS,UAG3C,IAAIP,EAAc9E,IAAE,iBAAkBsF,GACtCnG,KAAK0F,uBAAuBC,EAlB3B,CAmBJ,EAED3B,KAAM,WACF,6BAEA,IAAI5B,EAAOpC,KAAcqG,SAASC,cAAc,2BAC1Cd,iBAAiB,gBAAgB,SAAUR,GAE7C,IAAIW,EAAc9E,IAAE,+CAAgD0F,WACpEnE,EAAKsD,uBAAuBC,EAC/B,IACD9E,IAAE,YAAauB,EAAKe,KAAKqD,MAAK,SAAUC,GAEpC5F,IAAE,8BAA+BA,IADlBb,OAC+BwG,MAAK,SAAUE,GACzD,IAAIb,EAAK7F,KACTa,IAAEgF,GAAId,GAAG,SAAS,SAAUU,GACxBrD,EAAKwD,UAAUC,EAClB,GACJ,GACJ,GACJ,IC1DLc,EAAAA,EAAAA,M","sources":["webpack://plone-imagecropping/./resources/js/cropperpattern.js","webpack://plone-imagecropping/./resources/js/cropscaleselect.js","webpack://plone-imagecropping/./resources/bundle.js"],"sourcesContent":["import $ from \"jquery\";\nimport Base from \"@patternslib/patternslib/src/core/base\";\nimport logging from \"@patternslib/patternslib/src/core/logging\";\n\nlogging.setLevel(\"INFO\");\nconst log = logging.getLogger(\"pat-image-cropper\");\n\nexport default Base.extend({\n    name: \"image-cropper\",\n    trigger: \".pat-image-cropper\",\n    parser: \"mockup\",\n    while_reset: false,\n    while_init: true,\n    while_saving: false,\n    _changed: false,\n    defaults: {\n        identifier: null,\n        fieldname: null,\n        saveurl: null,\n        authenticator: null,\n        scale: null,\n        preview: null,\n        is_cropped: null,\n        view_mode: 3,\n        aspect_ratio: 16 / 9,\n        currrent_x: null,\n        currrent_y: null,\n        currrent_w: null,\n        currrent_h: null,\n        true_width: null,\n        true_height: null,\n    },\n\n    update_badges: function () {\n        if (this.while_saving) {\n            this.$badge_saving.show();\n            this.$button_save.prop(\"disabled\", true);\n            this.$button_reset.prop(\"disabled\", true);\n            this.$button_remove.prop(\"disabled\", true);\n            return;\n        } else {\n            this.$badge_saving.hide();\n        }\n        if (this.options.is_cropped) {\n            this.$button_remove.prop(\"disabled\", false);\n            this.$button_reset.prop(\"disabled\", false);\n            this.$badge_uncropped.hide();\n            this.$badge_cropped.show();\n        } else {\n            this.$button_remove.prop(\"disabled\", true);\n            this.$button_reset.prop(\"disabled\", true);\n            this.$badge_uncropped.show();\n            this.$badge_cropped.hide();\n        }\n        if (this.crop_changed()) {\n            this.$badge_changed.show();\n            this.$button_save.prop(\"disabled\", false);\n            this.$button_reset.prop(\"disabled\", false);\n        } else {\n            this.$badge_changed.hide();\n            if (this.options.is_cropped) {\n                this.$button_save.prop(\"disabled\", true);\n                this.$button_reset.prop(\"disabled\", true);\n            } else {\n                this.$button_save.prop(\"disabled\", false);\n                this.$button_reset.prop(\"disabled\", true);\n            }\n        }\n    },\n\n    crop_changed: function () {\n        if (!$(\".cropper-container\", this.$image.parent()).is(\":visible\")) {\n            return this._changed;\n        }\n        function is_within_1px_range(x, y) {\n            return (x>=(y-1)) && (x<=(y+1));\n        }\n        var current = this.cropper.getData();\n        var xc = is_within_1px_range(current.x, this.original_data.x),\n            yc = is_within_1px_range(current.y, this.original_data.y),\n            wc = is_within_1px_range(current.width, this.original_data.width),\n            hc = is_within_1px_range(current.height, this.original_data.height);\n        this._changed = !(xc && yc && wc && hc);\n        return this._changed;\n    },\n\n    reset: function () {\n        log.info(\"RESET\");\n        this.while_reset = true;\n        this.cropper.setData(this.initial_data);\n        this.visualize_selected_area();\n        this.while_reset = false;\n        this.update_badges();\n    },\n\n    remove: function () {\n        log.info(\"REMOVE\");\n        var self = this,\n            postData = {\n                remove: true,\n                fieldname: this.options.fieldname,\n                scale: this.options.scalename,\n                _authenticator: this.options.authenticator,\n            };\n        self.while_saving = true;\n        self.update_badges();\n        $.ajax({\n            url: this.options.saveurl,\n            type: \"POST\",\n            data: postData,\n            success: function (data, textStatus, jqXHR) {\n                self.options.is_cropped = false;\n                self.while_saving = false;\n                self.original_data = self.initial_data;\n                self.reset();\n            },\n            error: function (jqXHR, textStatus, errorThrown) {\n                self.while_saving = false;\n                self.update_badges();\n                alert(textStatus, errorThrown);\n            },\n        });\n    },\n\n    save: function () {\n        log.info(\"SAVE \" + this.identifier);\n        var self = this,\n            crop_data = this.cropper.getData(true),\n            postData = {\n                x: crop_data.x,\n                y: crop_data.y,\n                width: crop_data.width,\n                height: crop_data.height,\n                fieldname: this.options.fieldname,\n                scale: this.options.scalename,\n                _authenticator: this.options.authenticator,\n            };\n        self.while_saving = true;\n        self.update_badges();\n        $.ajax({\n            url: this.options.saveurl,\n            type: \"POST\",\n            data: postData,\n            success: function (data, textStatus, jqXHR) {\n                self.options.is_cropped = true;\n                self._changed = false;\n                self.original_data = {\n                    ...self.original_data,\n                    ...self.cropper.getData(true)\n                };\n                self.while_saving = false;\n                self.update_badges();\n            },\n            error: function (jqXHR, textStatus, errorThrown) {\n                self.while_saving = false;\n                self.update_badges();\n                alert(textStatus, errorThrown);\n            },\n        });\n    },\n\n    visualize_selected_area: function () {\n        var crop_data = this.cropper.getData(true);\n        $(\".cropx\", self.$el).text(Math.round(crop_data.x));\n        $(\".cropy\", self.$el).text(Math.round(crop_data.y));\n        $(\".cropw\", self.$el).text(Math.round(crop_data.width));\n        $(\".croph\", self.$el).text(Math.round(crop_data.height));\n    },\n\n    notify_visible: function () {\n        this.while_reset = true;\n        this.cropper.resize();\n        if (this.options.is_cropped) {\n            log.info(\"set to current\");\n            this.cropper.setData(this.original_data);\n            this.visualize_selected_area();\n        }\n        this.while_reset = false;\n    },\n\n    limit_minimum_cropping_size: function () {\n        var current = this.cropper,\n            newbox = {};\n        if (\n            current.width < this.options.target_width ||\n            current.height < this.options.target_height\n        ) {\n            newbox.width = this.options.target_width;\n            newbox.height = this.options.target_height;\n            if (current.x + this.options.target_width > this.options.true_width) {\n                newbox.x = this.options.true_width - this.options.target_width;\n            } else {\n                newbox.x = current.x;\n            }\n            if (current.y + this.options.target_height > this.options.true_height) {\n                newbox.y = this.options.true_height - this.options.target_height;\n            } else {\n                newbox.y = current.y;\n            }\n            newbox.rotate = current.rotate;\n            newbox.scaleX = current.scaleX;\n            newbox.scaleY = current.scaleY;\n            this.while_reset = true;\n            this.cropper.setData(newbox);\n            this.while_reset = false;\n        }\n    },\n\n    init: async function () {\n        const Cropper = (await import(\"cropperjs\")).default;\n\n        var self = this,\n            sel_select = \"#select-\" + self.options.identifier,\n            sel_form = \"#croppingarea-\" + self.options.identifier;\n        self.identifier = self.options.identifier;\n        self.$image = $(\"img.main-image\", self.$el);\n        self.$badge_cropped = $(sel_select + \" .badge.cropped\");\n        self.$badge_uncropped = $(sel_select + \" .badge.uncropped\");\n        self.$badge_changed = $(sel_select + \" .badge.changed\");\n        self.$badge_saving = $(sel_select + \" .badge.saving\");\n        self.$button_save = $(sel_form + \" button.save\");\n        self.$button_remove = $(sel_form + \" button.remove\");\n        self.$button_reset = $(sel_form + \" button.reset\");\n        self.$button_save_all = $(\"button.save-all\");\n\n        // we need to make coords floats\n        self.options.initial_x = parseFloat(self.options.initial_x);\n        self.options.initial_y = parseFloat(self.options.initial_y);\n        self.options.initial_w = parseFloat(self.options.initial_w);\n        self.options.initial_h = parseFloat(self.options.initial_h);\n        self.options.current_x = parseFloat(self.options.current_x);\n        self.options.current_y = parseFloat(self.options.current_y);\n        self.options.current_w = parseFloat(self.options.current_w);\n        self.options.current_h = parseFloat(self.options.current_h);\n        self.options.true_width = parseFloat(self.options.true_width);\n        self.options.true_height = parseFloat(self.options.true_height);\n        self.options.target_width = parseFloat(self.options.target_width);\n        self.options.target_height = parseFloat(self.options.target_height);\n        self.options.is_cropped = self.options.is_cropped == \"True\" ? true : false;\n\n        self.initial_data = {\n            x: this.options.initial_x,\n            y: this.options.initial_y,\n            width: this.options.initial_w,\n            height: this.options.initial_h,\n            rotate: 0,\n            scaleX: 1,\n            scaleY: 1,\n        }\n        // the scale we came in with from server side\n        self.original_data = {\n            // x: 100,\n            // y: 100,\n            // width: 1024,\n            // height: 768,\n            x: this.options.current_x,\n            y: this.options.current_y,\n            width: this.options.current_w,\n            height: this.options.current_h,\n            rotate: 0,\n            scaleX: 1,\n            scaleY: 1,\n        };\n\n        // hide badges\n        self.update_badges();\n\n        // bind buttons\n        self.$button_reset.on(\"click\", function () {\n            self.reset();\n        });\n        self.$button_remove.on(\"click\", function () {\n            self.remove();\n        });\n        self.$button_save.on(\"click\", function () {\n            self.save();\n        });\n        self.$button_save_all.on(\n            \"click\",\n            function (event) {\n                if (self.crop_changed()) {\n                    self.save();\n                }\n            }\n        );\n\n        // configure and init cropper\n        var configuration = {\n            preview: self.options.preview,\n            data: self.original_data, // for some reasons these are not respected\n            autoCrop: true,\n            autoCropArea: 1,\n            aspectRatio: parseFloat(self.options.aspect_ratio),\n            viewMode: self.options.view_mode,\n            restore: false,\n        };\n\n        let img_el = self.$image[0];\n\n        self.cropper = new Cropper(img_el, configuration);\n\n        // setup events\n        img_el.addEventListener(\"crop\", function (e) {\n            if(self.while_init || self.while_reset) {\n                return;\n            }\n            self.limit_minimum_cropping_size();\n            self.update_badges();\n            self.visualize_selected_area();\n        });\n        img_el.addEventListener(\"ready\", function(e) {\n            // initialization finished\n            self.while_init = false;\n        })\n\n        self.$image.on(\"CROPPERPATTERN.VISIBLE\", function () {\n            self.notify_visible();\n        });\n    },\n});\n","import $ from \"jquery\";\nimport Base from \"@patternslib/patternslib/src/core/base\";\nimport logging from \"@patternslib/patternslib/src/core/logging\";\n\nlogging.setLevel(\"INFO\");\nconst log = logging.getLogger(\"pat-imagecrop-scaleselect\");\n\nexport default Base.extend({\n    name: \"imagecropsave\",\n    trigger: \".pat-imagecrop-scaleselect\",\n    parser: \"mockup\",\n\n    // A shortcut for triggering custom events\n    trigger_notify_visible: function ($cropperimg) {\n        var e = $.Event(\"CROPPERPATTERN.VISIBLE\");\n        $cropperimg.trigger(e);\n    },\n\n    toggle_li: function (li) {\n        var $li = $(li),\n            $ul = $($li.parent());\n        if ($li.hasClass(\"active\")) {\n            // ignore any active\n            return;\n        }\n        // set prior active to inactive\n        $(\"li.list-group-item.active\", $ul).removeClass(\"active\").addClass(\"inactive\");\n\n        // set clicked tab to active\n        $li.removeClass(\"inactive\").addClass(\"active\");\n\n        // activate/ deactivate cropping area\n        var $new_area = $($($li.data(\"cropping-area\"))),\n            $areas = $($new_area.parent()),\n            $old_area = $(\".singlecroppingarea.active\", $areas);\n\n        $old_area.removeClass(\"active\").addClass(\"inactive\");\n\n        $new_area.removeClass(\"inactive\").addClass(\"active\");\n\n        // trigger repaint\n        var $cropperimg = $(\"img.main-image\", $new_area);\n        this.trigger_notify_visible($cropperimg);\n    },\n\n    init: function () {\n        import(\"../scss/cropscaleselect.scss\");\n\n        var self = this, tabEl = document.querySelector('a[data-bs-toggle=\"tab\"]');\n        tabEl.addEventListener('shown.bs.tab', function (event) {\n            // trigger resize\n            var $cropperimg = $('div.singlecroppingarea.active img.main-image', $fieldset);\n            self.trigger_notify_visible($cropperimg);\n        });\n        $(\".tab-pane\", self.$el).each(function (findex) {\n            var fieldset = this;\n            $(\"li.list-group-item.scalable\", $(fieldset)).each(function (lindex) {\n                var li = this;\n                $(li).on(\"click\", function (e) {\n                    self.toggle_li(li);\n                });\n            });\n        });\n    },\n\n});\n","import registry from \"@patternslib/patternslib/src/core/registry\";\n\nimport \"./js/cropperpattern\";\nimport \"./js/cropscaleselect\";\n\nregistry.init();\n"],"names":["i","logging","log","Base","name","trigger","parser","while_reset","while_init","while_saving","_changed","defaults","identifier","fieldname","saveurl","authenticator","scale","preview","is_cropped","view_mode","aspect_ratio","currrent_x","currrent_y","currrent_w","currrent_h","true_width","true_height","update_badges","this","$badge_saving","show","$button_save","prop","$button_reset","$button_remove","hide","options","$badge_uncropped","$badge_cropped","crop_changed","$badge_changed","$","$image","parent","is","is_within_1px_range","x","y","current","cropper","getData","xc","original_data","yc","wc","width","hc","height","reset","info","setData","initial_data","visualize_selected_area","remove","self","postData","scalename","_authenticator","url","type","data","success","textStatus","jqXHR","error","errorThrown","alert","save","crop_data","$el","text","Math","round","notify_visible","resize","limit_minimum_cropping_size","newbox","target_width","target_height","rotate","scaleX","scaleY","init","Cropper","default","sel_select","sel_form","$button_save_all","initial_x","parseFloat","initial_y","initial_w","initial_h","current_x","current_y","current_w","current_h","on","event","configuration","autoCrop","autoCropArea","aspectRatio","viewMode","restore","img_el","addEventListener","e","trigger_notify_visible","$cropperimg","toggle_li","li","$li","$ul","hasClass","removeClass","addClass","$new_area","$areas","document","querySelector","$fieldset","each","findex","lindex","registry"],"sourceRoot":""}