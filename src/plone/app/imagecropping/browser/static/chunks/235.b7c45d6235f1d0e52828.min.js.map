{"version":3,"file":"chunks/235.b7c45d6235f1d0e52828.min.js","mappings":"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","sources":["webpack://plone-imagecropping/./resources/js/cropperpattern.js","webpack://plone-imagecropping/./resources/js/cropscaleselect.js","webpack://plone-imagecropping/./resources/bundle.js"],"sourcesContent":["import $ from \"jquery\";\nimport Base from \"@patternslib/patternslib/src/core/base\";\nimport logging from \"@patternslib/patternslib/src/core/logging\";\n\nlogging.setLevel(\"INFO\");\nconst log = logging.getLogger(\"pat-image-cropper\");\n\nexport default Base.extend({\n    name: \"image-cropper\",\n    trigger: \".pat-image-cropper\",\n    parser: \"mockup\",\n    while_reset: false,\n    while_init: true,\n    while_saving: false,\n    _changed: false,\n    defaults: {\n        identifier: null,\n        fieldname: null,\n        saveurl: null,\n        authenticator: null,\n        scale: null,\n        preview: null,\n        is_cropped: null,\n        view_mode: 3,\n        aspect_ratio: 16 / 9,\n        currrent_x: null,\n        currrent_y: null,\n        currrent_w: null,\n        currrent_h: null,\n        true_width: null,\n        true_height: null,\n    },\n\n    update_badges: function () {\n        if (this.while_saving) {\n            this.$badge_saving.show();\n            this.$button_save.prop(\"disabled\", true);\n            this.$button_reset.prop(\"disabled\", true);\n            this.$button_remove.prop(\"disabled\", true);\n            return;\n        } else {\n            this.$badge_saving.hide();\n        }\n        if (this.options.is_cropped) {\n            this.$button_remove.prop(\"disabled\", false);\n            this.$badge_uncropped.hide();\n            this.$badge_cropped.show();\n        } else {\n            this.$button_remove.prop(\"disabled\", true);\n            this.$badge_uncropped.show();\n            this.$badge_cropped.hide();\n        }\n        if (this.crop_changed()) {\n            this.$badge_changed.show();\n            this.$button_save.prop(\"disabled\", false);\n            this.$button_reset.prop(\"disabled\", false);\n        } else {\n            this.$badge_changed.hide();\n            if (this.options.is_cropped) {\n                this.$button_save.prop(\"disabled\", true);\n                this.$button_reset.prop(\"disabled\", true);\n            } else {\n                this.$button_save.prop(\"disabled\", false);\n                this.$button_reset.prop(\"disabled\", true);\n            }\n        }\n    },\n\n    crop_changed: function () {\n        if (this.while_init || this.while_reset) {\n            return false;\n        }\n        if (!$(\".cropper-container\", this.$image.parent()).is(\":visible\")) {\n            return this._changed;\n        }\n        var current = this.$image.cropper(\"getData\");\n        var xc =\n                this.original_data.x - 1 < current.x &&\n                current.x < this.original_data.x + 1,\n            yc =\n                this.original_data.y - 1 < current.y &&\n                current.y < this.original_data.y + 1,\n            wc =\n                this.original_data.width - 1 < current.width &&\n                current.width < this.original_data.width + 1,\n            hc =\n                this.original_data.height - 1 < current.height &&\n                current.height < this.original_data.height + 1;\n        this._changed = !(xc && yc && wc && hc);\n        return this._changed;\n    },\n\n    reset: function () {\n        log.info(\"RESET\");\n        this.while_reset = true;\n        this.cropper.setData(this.original_data);\n        this.visualize_selected_area();\n        this.while_reset = false;\n        this.update_badges();\n    },\n\n    remove: function () {\n        log.info(\"REMOVE\");\n        var self = this,\n            postData = {\n                remove: true,\n                fieldname: this.options.fieldname,\n                scale: this.options.scalename,\n                _authenticator: this.options.authenticator,\n            };\n        self.while_saving = true;\n        self.update_badges();\n        $.ajax({\n            url: this.options.saveurl,\n            type: \"POST\",\n            data: postData,\n            success: function (data, textStatus, jqXHR) {\n                self.options.is_cropped = false;\n                self.while_saving = false;\n                self.update_badges();\n            },\n            error: function (jqXHR, textStatus, errorThrown) {\n                self.while_saving = false;\n                self.update_badges();\n                alert(textStatus, errorThrown);\n            },\n        });\n    },\n\n    save: function () {\n        log.info(\"SAVE \" + this.identifier);\n        var self = this,\n            crop_data = this.$image.cropper(\"getData\"),\n            postData = {\n                x: crop_data.x,\n                y: crop_data.y,\n                width: crop_data.width,\n                height: crop_data.height,\n                fieldname: this.options.fieldname,\n                scale: this.options.scalename,\n                _authenticator: this.options.authenticator,\n            };\n        self.while_saving = true;\n        self.update_badges();\n        $.ajax({\n            url: this.options.saveurl,\n            type: \"POST\",\n            data: postData,\n            success: function (data, textStatus, jqXHR) {\n                self.options.is_cropped = true;\n                self._changed = false;\n                self.original_data = $.extend({}, self.cropper.getData());\n                self.while_saving = false;\n                self.update_badges();\n            },\n            error: function (jqXHR, textStatus, errorThrown) {\n                self.while_saving = false;\n                self.update_badges();\n                alert(textStatus, errorThrown);\n            },\n        });\n    },\n\n    visualize_selected_area: function () {\n        var crop_data = this.$image.cropper(\"getData\");\n        $(\".cropx\", self.$el).text(Math.round(crop_data.x));\n        $(\".cropy\", self.$el).text(Math.round(crop_data.y));\n        $(\".cropw\", self.$el).text(Math.round(crop_data.width));\n        $(\".croph\", self.$el).text(Math.round(crop_data.height));\n    },\n\n    notify_visible: function () {\n        this.while_reset = true;\n        this.cropper.resize();\n        if (this.options.is_cropped && !this.crop_changed()) {\n            log.info(\"set to orig\");\n            this.cropper.setData(this.original_data);\n            this.visualize_selected_area();\n        }\n        this.while_reset = false;\n    },\n\n    limit_minimum_cropping_size: function () {\n        var current = this.$image.cropper(\"getData\"),\n            newbox = {};\n        if (\n            current.width < this.options.target_width ||\n            current.height < this.options.target_height\n        ) {\n            newbox.width = this.options.target_width;\n            newbox.height = this.options.target_height;\n            if (current.x + this.options.target_width > this.options.true_width) {\n                newbox.x = this.options.true_width - this.options.target_width;\n            } else {\n                newbox.x = current.x;\n            }\n            if (current.y + this.options.target_height > this.options.true_height) {\n                newbox.y = this.options.true_height - this.options.target_height;\n            } else {\n                newbox.y = current.y;\n            }\n            newbox.rotate = current.rotate;\n            newbox.scaleX = current.scaleX;\n            newbox.scaleY = current.scaleY;\n            this.while_reset = true;\n            this.cropper.setData(newbox);\n            this.while_reset = false;\n        }\n    },\n\n    init: async function () {\n        (await import(\"cropper\")).default;\n\n        var self = this,\n            area_inactive = self.$el.parent().hasClass(\"d-none\"),\n            sel_select = \"#select-\" + self.options.identifier,\n            sel_cropper = \"#croppingarea-\" + self.options.identifier,\n            sel_form = \"#croppingarea-\" + self.options.identifier;\n        self.identifier = self.options.identifier;\n        self.$image = $(\"img.main-image\", self.$el);\n        self.$badge_cropped = $(sel_select + \" .badge.cropped\");\n        self.$badge_uncropped = $(sel_select + \" .badge.uncropped\");\n        self.$badge_changed = $(sel_select + \" .badge.changed\");\n        self.$badge_saving = $(sel_select + \" .badge.saving\");\n        self.$button_save = $(sel_form + \" button.save\");\n        self.$button_remove = $(sel_form + \" button.remove\");\n        self.$button_reset = $(sel_form + \" button.reset\");\n        self.$button_save_all = $(\"button.save-all\");\n\n        // we need to make coords floats\n        self.options.current_x = parseFloat(self.options.current_x);\n        self.options.current_y = parseFloat(self.options.current_y);\n        self.options.current_w = parseFloat(self.options.current_w);\n        self.options.current_h = parseFloat(self.options.current_h);\n        self.options.true_width = parseFloat(self.options.true_width);\n        self.options.true_height = parseFloat(self.options.true_height);\n        self.options.target_width = parseFloat(self.options.target_width);\n        self.options.target_height = parseFloat(self.options.target_height);\n        self.options.is_cropped = self.options.is_cropped == \"True\" ? true : false;\n\n        // the scale we came in with from server side\n        self.original_data = {\n            // x: 100,\n            // y: 100,\n            // width: 1024,\n            // height: 768,\n            x: this.options.current_x,\n            y: this.options.current_y,\n            width: this.options.current_w,\n            height: this.options.current_h,\n            rotate: 0,\n            scaleX: 1,\n            scaleY: 1,\n        };\n\n        // hide badges\n        self.update_badges();\n\n        // bind buttons\n        self.$button_reset.on(\"click\", function () {\n            self.reset();\n        });\n        self.$button_remove.on(\"click\", function () {\n            self.remove();\n        });\n        self.$button_save.on(\"click\", function () {\n            self.save();\n        });\n        self.$button_save_all.on(\n            \"click\",\n            function (event) {\n                if (self.crop_changed()) {\n                    self.save();\n                }\n            }\n        );\n\n        // configure and init cropper\n        var configuration = {\n            preview: self.options.preview,\n            data: self.original_data, // for some reasons these are not respected\n            autoCrop: true,\n            autoCropArea: 1,\n            aspectRatio: parseFloat(self.options.aspect_ratio),\n            viewMode: self.options.view_mode,\n            restore: false,\n            crop: function (e) {\n                if (self.while_init || self.while_reset) {\n                    return;\n                }\n                self.limit_minimum_cropping_size();\n                self.update_badges();\n                self.visualize_selected_area();\n            },\n            built: function () {\n                self.reset();\n                self.while_init = false;\n            },\n        };\n        self.$image.cropper(configuration);\n        self.cropper = self.$image.data(\"cropper\");\n        self.$image.on(\"CROPPERPATTERN.VISIBLE\", function () {\n            self.notify_visible();\n        });\n    },\n});\n","import $ from \"jquery\";\nimport Base from \"@patternslib/patternslib/src/core/base\";\nimport logging from \"@patternslib/patternslib/src/core/logging\";\n\nlogging.setLevel(\"INFO\");\nconst log = logging.getLogger(\"pat-imagecrop-scaleselect\");\n\nexport default Base.extend({\n    name: \"imagecropsave\",\n    trigger: \".pat-imagecrop-scaleselect\",\n    parser: \"mockup\",\n\n    // A shortcut for triggering custom events\n    trigger_notify_visible: function ($cropperimg) {\n        var e = $.Event(\"CROPPERPATTERN.VISIBLE\");\n        $cropperimg.trigger(e);\n    },\n\n    toggle_li: function (li) {\n        var $li = $(li),\n            $ul = $($li.parent());\n        if ($li.hasClass(\"active\")) {\n            // ignore any active\n            return;\n        }\n        // set prior active to inactive\n        $(\"li.list-group-item.active\", $ul).removeClass(\"active\").addClass(\"inactive\");\n\n        // set clicked tab to active\n        $li.removeClass(\"inactive\").addClass(\"active\");\n\n        // activate/ deactivate cropping area\n        var $new_area = $($($li.data(\"cropping-area\"))),\n            $areas = $($new_area.parent()),\n            $old_area = $(\".singlecroppingarea.active\", $areas);\n\n        $old_area.removeClass(\"active\").addClass(\"inactive\");\n\n        $new_area.removeClass(\"inactive\").addClass(\"active\");\n\n        // trigger repaint\n        var $cropperimg = $(\"img.main-image\", $new_area);\n        this.trigger_notify_visible($cropperimg);\n    },\n\n    set_preview_dimensions: function (li) {\n        // log.info('SET_PREVIEW_DIMENSIONS');\n        var $li = $(li),\n            $pcontainer = $(\".preview-container\", $li),\n            $preview = $(\".crop-preview\", $pcontainer),\n            twidth = parseFloat($pcontainer.data(\"target-width\")),\n            theight = parseFloat($pcontainer.data(\"target-height\")),\n            liwidth = $li.width(),\n            height = null;\n        // log.info('liwidth');\n        // log.info(liwidth);\n        // log.info($preview);\n\n        if (liwidth >= twidth) {\n            // if smaller set to real value\n            // log.info('-> smaller');\n            height = theight;\n        } else {\n            // if greater scale down, respect aspect ratio\n            // log.info('->  greater');\n            height = (theight * liwidth) / twidth;\n        }\n        $pcontainer.width(liwidth);\n        $pcontainer.height(height);\n        $preview.width(liwidth);\n        $preview.height(height);\n    },\n\n    init: function () {\n        import(\"../scss/cropscaleselect.scss\");\n\n        var self = this, tabEl = document.querySelector('a[data-bs-toggle=\"tab\"]');\n        tabEl.addEventListener('shown.bs.tab', function (event) {\n            // trigger resize\n            var $cropperimg = $('div.singlecroppingarea.active img.main-image', $fieldset);\n            this.trigger_notify_visible($cropperimg);\n        });\n        $(\".tab-pane\", self.$el).each(function (findex) {\n            var fieldset = this;\n            $(\"li.list-group-item.scalable\", $(fieldset)).each(function (lindex) {\n                var li = this;\n                self.set_preview_dimensions(li);\n                $(li).click(function () {\n                    self.toggle_li(li);\n                });\n            });\n        });\n    },\n\n});\n","import registry from \"@patternslib/patternslib/src/core/registry\";\n\nimport \"./js/cropperpattern\";\nimport \"./js/cropscaleselect\";\n\nregistry.init();\n"],"names":["i","logging","log","Base","name","trigger","parser","while_reset","while_init","while_saving","_changed","defaults","identifier","fieldname","saveurl","authenticator","scale","preview","is_cropped","view_mode","aspect_ratio","currrent_x","currrent_y","currrent_w","currrent_h","true_width","true_height","update_badges","this","$badge_saving","show","$button_save","prop","$button_reset","$button_remove","hide","options","$badge_uncropped","$badge_cropped","crop_changed","$badge_changed","$","$image","parent","is","current","cropper","xc","original_data","x","yc","y","wc","width","hc","height","reset","info","setData","visualize_selected_area","remove","self","postData","scalename","_authenticator","url","type","data","success","textStatus","jqXHR","error","errorThrown","alert","save","crop_data","getData","$el","text","Math","round","notify_visible","resize","limit_minimum_cropping_size","newbox","target_width","target_height","rotate","scaleX","scaleY","init","default","hasClass","sel_select","sel_form","$button_save_all","current_x","parseFloat","current_y","current_w","current_h","on","event","configuration","autoCrop","autoCropArea","aspectRatio","viewMode","restore","crop","e","built","trigger_notify_visible","$cropperimg","toggle_li","li","$li","$ul","removeClass","addClass","$new_area","$areas","set_preview_dimensions","$pcontainer","$preview","twidth","theight","liwidth","document","querySelector","addEventListener","$fieldset","each","findex","lindex","click","registry"],"sourceRoot":""}